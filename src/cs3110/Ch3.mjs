// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function product(lst) {
  if (lst) {
    return Math.imul(lst.hd, product(lst.tl));
  } else {
    return 1;
  }
}

function concat(lst) {
  if (lst) {
    return lst.hd + concat(lst.tl);
  } else {
    return "";
  }
}

function patterns(lst) {
  if (!lst) {
    return false;
  }
  var x = lst.hd;
  if (x === "bigred") {
    return true;
  }
  var match = lst.tl;
  if (!match) {
    return false;
  }
  var match$1 = match.tl;
  var y = match.hd;
  if (!match$1) {
    return true;
  }
  var match$2 = match$1.tl;
  if (match$2 && !match$2.tl) {
    return true;
  } else {
    return x === y;
  }
}

function fifth(lst) {
  return List.nth_opt(lst, 5);
}

function sort_rev(param) {
  return List.sort((function (x, y) {
                return y - x | 0;
              }), param);
}

function sort_rev$p(lst) {
  return List.sort((function (x, y) {
                return y - x | 0;
              }), lst);
}

function sort_rev$p$p(lst) {
  return List.sort((function (x, y) {
                return y - x | 0;
              }), lst);
}

function sort_rev$p$p$p(lst) {
  return Belt_List.sort(lst, (function (x, y) {
                return y - x | 0;
              }));
}

function sort_rev$p$p$p$p(lst) {
  return Belt_List.sort(lst, (function (x, y) {
                return y - x | 0;
              }));
}

function last(lst) {
  if (lst) {
    return List.nth_opt(lst, List.length(lst) - 1 | 0);
  }
  
}

function anyZeroes(param) {
  return List.exists((function (x) {
                return x === 0;
              }), param);
}

function take(n, lst) {
  if (n === 0) {
    return /* [] */0;
  } else if (lst) {
    return {
            hd: lst.hd,
            tl: take(n - 1 | 0, lst.tl)
          };
  } else {
    return lst;
  }
}

function take$p(_n, _accOpt, _lst) {
  while(true) {
    var accOpt = _accOpt;
    var lst = _lst;
    var n = _n;
    var acc = accOpt !== undefined ? accOpt : /* [] */0;
    if (n === 0) {
      return acc;
    }
    if (!lst) {
      return acc;
    }
    _lst = lst.tl;
    _accOpt = List.append(acc, {
          hd: lst.hd,
          tl: /* [] */0
        });
    _n = n - 1 | 0;
    continue ;
  };
}

function drop(_n, _lst) {
  while(true) {
    var lst = _lst;
    var n = _n;
    if (n === 0) {
      return lst;
    }
    if (!lst) {
      return lst;
    }
    _lst = lst.tl;
    _n = n - 1 | 0;
    continue ;
  };
}

function print_list(_lst) {
  while(true) {
    var lst = _lst;
    if (!lst) {
      return ;
    }
    console.log(lst.hd);
    _lst = lst.tl;
    continue ;
  };
}

function print_list$p(param) {
  return List.iter((function (prim) {
                console.log(prim);
              }), param);
}

function fullName(student) {
  return [
          student.firstName,
          student.lastName
        ];
}

function createStudent(firstName, lastName, gpa) {
  return {
          firstName: firstName,
          lastName: lastName,
          gpa: gpa
        };
}

function safeHd(lst) {
  if (lst) {
    return Caml_option.some(lst.hd);
  }
  
}

function safeTl(lst) {
  if (lst) {
    return lst.tl;
  }
  
}

console.log(patterns({
          hd: "bigred",
          tl: /* [] */0
        }) === true);

console.log(patterns({
          hd: "bigred",
          tl: {
            hd: "foo",
            tl: /* [] */0
          }
        }) === true);

console.log(patterns({
          hd: "foo",
          tl: /* [] */0
        }) === false);

console.log(patterns({
          hd: "foo",
          tl: {
            hd: "foo",
            tl: /* [] */0
          }
        }) === true);

console.log(patterns({
          hd: "foo",
          tl: {
            hd: "foo",
            tl: {
              hd: "bar",
              tl: /* [] */0
            }
          }
        }) === true);

console.log(patterns({
          hd: "foo",
          tl: {
            hd: "bar",
            tl: {
              hd: "baz",
              tl: /* [] */0
            }
          }
        }) === false);

console.log(patterns({
          hd: "foo",
          tl: {
            hd: "bar",
            tl: {
              hd: "baz",
              tl: {
                hd: "qux",
                tl: /* [] */0
              }
            }
          }
        }) === true);

console.log(sort_rev(/* [] */0) === /* [] */0);

console.log(Caml_obj.equal(sort_rev({
              hd: 1,
              tl: /* [] */0
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(sort_rev({
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }));

console.log(Caml_obj.equal(sort_rev({
              hd: 1,
              tl: {
                hd: 3,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }), {
          hd: 3,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }));

console.log(sort_rev$p(/* [] */0) === /* [] */0);

console.log(Caml_obj.equal(sort_rev$p({
              hd: 1,
              tl: /* [] */0
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(sort_rev$p({
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }));

console.log(Caml_obj.equal(sort_rev$p({
              hd: 1,
              tl: {
                hd: 3,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }), {
          hd: 3,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }));

console.log(sort_rev$p$p(/* [] */0) === /* [] */0);

console.log(Caml_obj.equal(sort_rev$p$p({
              hd: 1,
              tl: /* [] */0
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(sort_rev$p$p({
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }));

console.log(Caml_obj.equal(sort_rev$p$p({
              hd: 1,
              tl: {
                hd: 3,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }), {
          hd: 3,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }));

console.log(sort_rev$p$p$p(/* [] */0) === /* [] */0);

console.log(Caml_obj.equal(sort_rev$p$p$p({
              hd: 1,
              tl: /* [] */0
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(sort_rev$p$p$p({
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }));

console.log(Caml_obj.equal(sort_rev$p$p$p({
              hd: 1,
              tl: {
                hd: 3,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }), {
          hd: 3,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }));

console.log(sort_rev$p$p$p$p(/* [] */0) === /* [] */0);

console.log(Caml_obj.equal(sort_rev$p$p$p$p({
              hd: 1,
              tl: /* [] */0
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(sort_rev$p$p$p$p({
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }));

console.log(Caml_obj.equal(sort_rev$p$p$p$p({
              hd: 1,
              tl: {
                hd: 3,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }), {
          hd: 3,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }));

console.log(true);

console.log(Caml_obj.equal(last({
              hd: 1,
              tl: /* [] */0
            }), 1));

console.log(Caml_obj.equal(last({
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), 2));

console.log(Caml_obj.equal(last({
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: /* [] */0
                }
              }
            }), 3));

console.log(anyZeroes(/* [] */0) === false);

console.log(anyZeroes({
          hd: 1,
          tl: /* [] */0
        }) === false);

console.log(anyZeroes({
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }) === false);

console.log(anyZeroes({
          hd: 0,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          }
        }) === true);

console.log(anyZeroes({
          hd: 1,
          tl: {
            hd: 0,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          }
        }) === true);

console.log(anyZeroes({
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 0,
              tl: /* [] */0
            }
          }
        }) === true);

console.log(take(0, /* [] */0) === /* [] */0);

console.log(take(0, {
          hd: 1,
          tl: /* [] */0
        }) === /* [] */0);

console.log(Caml_obj.equal(take(1, {
              hd: 1,
              tl: /* [] */0
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(take(2, {
              hd: 1,
              tl: /* [] */0
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(take(1, {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(take(2, {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), {
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }));

console.log(Caml_obj.equal(take(3, {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: /* [] */0
                }
              }
            }), {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }));

console.log(Caml_obj.equal(take(3, {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: {
                    hd: 4,
                    tl: /* [] */0
                  }
                }
              }
            }), {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }));

console.log(take$p(0, undefined, /* [] */0) === /* [] */0);

console.log(take$p(0, undefined, {
          hd: 1,
          tl: /* [] */0
        }) === /* [] */0);

console.log(Caml_obj.equal(take$p(1, undefined, {
              hd: 1,
              tl: /* [] */0
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(take$p(2, undefined, {
              hd: 1,
              tl: /* [] */0
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(take$p(1, undefined, {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(take$p(2, undefined, {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), {
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }));

console.log(Caml_obj.equal(take$p(3, undefined, {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: /* [] */0
                }
              }
            }), {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }));

console.log(Caml_obj.equal(take$p(3, undefined, {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: {
                    hd: 4,
                    tl: /* [] */0
                  }
                }
              }
            }), {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }));

console.log(drop(0, /* [] */0) === /* [] */0);

console.log(drop(1, /* [] */0) === /* [] */0);

console.log(Caml_obj.equal(drop(0, {
              hd: 1,
              tl: /* [] */0
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(drop(1, {
          hd: 1,
          tl: /* [] */0
        }) === /* [] */0);

console.log(drop(2, {
          hd: 1,
          tl: /* [] */0
        }) === /* [] */0);

console.log(Caml_obj.equal(drop(1, {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), {
          hd: 2,
          tl: /* [] */0
        }));

console.log(drop(2, {
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }) === /* [] */0);

console.log(Caml_obj.equal(drop(2, {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: /* [] */0
                }
              }
            }), {
          hd: 3,
          tl: /* [] */0
        }));

console.log(drop(3, {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }) === /* [] */0);

console.log(Caml_obj.equal(drop(2, {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: {
                    hd: 4,
                    tl: /* [] */0
                  }
                }
              }
            }), {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }));

console.log(Caml_obj.equal(drop(3, {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: {
                    hd: 4,
                    tl: /* [] */0
                  }
                }
              }
            }), {
          hd: 4,
          tl: /* [] */0
        }));

print_list(/* [] */0);

print_list({
      hd: 1,
      tl: /* [] */0
    });

print_list({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    });

print_list({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });

print_list$p(/* [] */0);

print_list$p({
      hd: 1,
      tl: /* [] */0
    });

print_list$p({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    });

print_list$p({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });

console.log(Caml_obj.equal({
          firstName: "Jane",
          lastName: "Doe",
          gpa: 3.2
        }, {
          firstName: "Jane",
          lastName: "Doe",
          gpa: 3.2
        }));

console.log(true);

console.log(Caml_obj.equal(1, 1));

console.log(Caml_obj.equal(1, 1));

console.log(Caml_obj.equal(1, 1));

console.log(true);

console.log(Caml_obj.equal(safeTl({
              hd: 1,
              tl: /* [] */0
            }), /* [] */0));

console.log(Caml_obj.equal(safeTl({
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), {
          hd: 2,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(safeTl({
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: /* [] */0
                }
              }
            }), {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }));

var s = {
  firstName: "Tramaine",
  lastName: "Gillus",
  gpa: 3.7
};

var charizard = {
  name: "charizard",
  hp: 79,
  ptype: "Fire"
};

var ember = {
  name: "bubble",
  hp: 40,
  ptype: "Fire"
};

var squirtle = {
  name: "squirtle",
  hp: 44,
  ptype: "Water"
};

var bubble = {
  name: "bubble",
  hp: 40,
  ptype: "Water"
};

var facade = {
  name: "facade",
  hp: 70,
  ptype: "Normal"
};

var covet = {
  name: "covet",
  hp: 60,
  ptype: "Normal"
};

export {
  product ,
  concat ,
  patterns ,
  fifth ,
  sort_rev ,
  sort_rev$p ,
  sort_rev$p$p ,
  sort_rev$p$p$p ,
  sort_rev$p$p$p$p ,
  last ,
  anyZeroes ,
  take ,
  take$p ,
  drop ,
  print_list ,
  print_list$p ,
  s ,
  fullName ,
  createStudent ,
  charizard ,
  ember ,
  squirtle ,
  bubble ,
  facade ,
  covet ,
  safeHd ,
  safeTl ,
}
/*  Not a pure module */
