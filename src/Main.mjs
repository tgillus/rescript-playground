// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function last(_list) {
  while(true) {
    var list = _list;
    if (!list) {
      return ;
    }
    var rest = list.tl;
    if (!rest) {
      return Caml_option.some(list.hd);
    }
    _list = rest;
    continue ;
  };
}

console.log(last(/* [] */0) === undefined);

console.log(last({
          hd: 1,
          tl: /* [] */0
        }) === 1);

console.log(last({
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }) === 2);

console.log(last({
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }) === 3);

function lastTwo(_list) {
  while(true) {
    var list = _list;
    if (!list) {
      return ;
    }
    var rest = list.tl;
    if (!rest) {
      return ;
    }
    if (!rest.tl) {
      return [
              list.hd,
              rest.hd
            ];
    }
    _list = rest;
    continue ;
  };
}

console.log(lastTwo(/* [] */0) === undefined);

console.log(lastTwo({
          hd: 1,
          tl: /* [] */0
        }) === undefined);

console.log(Caml_obj.equal(lastTwo({
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), [
          1,
          2
        ]));

console.log(Caml_obj.equal(lastTwo({
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: /* [] */0
                }
              }
            }), [
          2,
          3
        ]));

function at(_list, _n) {
  while(true) {
    var n = _n;
    var list = _list;
    if (!list) {
      return ;
    }
    if (n === 0) {
      return Caml_option.some(list.hd);
    }
    _n = n - 1 | 0;
    _list = list.tl;
    continue ;
  };
}

console.log(at(/* [] */0, 0) === undefined);

console.log(at({
          hd: 1,
          tl: /* [] */0
        }, 0) === 1);

console.log(at({
          hd: 1,
          tl: /* [] */0
        }, 1) === undefined);

console.log(at({
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }, 0) === 1);

console.log(at({
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }, 1) === 2);

console.log(at({
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }, 2) === undefined);

console.log(at({
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }, 0) === 1);

console.log(at({
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }, 1) === 2);

console.log(at({
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }, 2) === 3);

console.log(at({
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }, 3) === undefined);

function length(_countOpt, _list) {
  while(true) {
    var countOpt = _countOpt;
    var list = _list;
    var count = countOpt !== undefined ? countOpt : 0;
    if (!list) {
      return count;
    }
    _list = list.tl;
    _countOpt = count + 1 | 0;
    continue ;
  };
}

console.log(length(undefined, /* [] */0) === 0);

console.log(length(undefined, {
          hd: 1,
          tl: /* [] */0
        }) === 1);

console.log(length(undefined, {
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }) === 2);

console.log(length(undefined, {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }) === 3);

function reverse(_accOpt, _list) {
  while(true) {
    var accOpt = _accOpt;
    var list = _list;
    var acc = accOpt !== undefined ? accOpt : /* [] */0;
    if (!list) {
      return acc;
    }
    _list = list.tl;
    _accOpt = {
      hd: list.hd,
      tl: acc
    };
    continue ;
  };
}

console.log(reverse(undefined, /* [] */0) === /* [] */0);

console.log(Caml_obj.equal(reverse(undefined, {
              hd: 1,
              tl: /* [] */0
            }), {
          hd: 1,
          tl: /* [] */0
        }));

console.log(Caml_obj.equal(reverse(undefined, {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }), {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }));

console.log(Caml_obj.equal(reverse(undefined, {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: /* [] */0
                }
              }
            }), {
          hd: 3,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }));

export {
  last ,
  lastTwo ,
  at ,
  length ,
  reverse ,
}
/*  Not a pure module */
